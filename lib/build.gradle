import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id "com.google.protobuf" version "0.9.4"
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("jacoco")
    id("checkstyle")
    id("maven-publish")
    id("signing")
}

group = 'com.phatjam98'
version = '0.0.1-SNAPSHOT'

// Apply a specific Java toolchain to ease working on different environments.
java {
    withJavadocJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'proto-faker'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = "${groupId}:${artifactId}"
                description = 'A library for generating fake data from protobuf schemas.'
                url = 'https://github.com/phatjam98/proto-faker'
                properties = [
                        myProp          : "value",
                        "prop.with.dots": "anotherValue"
                ]
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'phatjam'
                        name = 'Travis Carter'
                        email = 'phatjam98@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/phatjam98/proto-faker.git'
                    developerConnection = 'scm:git:ssh://github.com/phatjam98/proto-faker.git'
                    url = 'https://github.com/phatjam98/proto-faker'
                }
            }
        }
    }
    repositories {
        maven {
            name = 'OSSRH'
            def snapshotRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            def releaseRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
            url = version.endsWith('SNAPSHOT') ? snapshotRepoUrl : releaseRepoUrl
            credentials {
                username = "$mavenRepoUsername"
                password = "$mavenRepoPassword"
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    api("com.github.javafaker:javafaker:1.0.2")
    api("com.google.protobuf:protobuf-java:3.24.4")

    implementation("org.slf4j:slf4j-api:2.0.7")
    implementation("com.fasterxml.jackson.core:jackson-databind:2.14.2")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.14.2")

    implementation platform('org.apache.groovy:groovy-bom:4.0.15')
    implementation 'org.apache.groovy:groovy'
    testImplementation platform("org.spockframework:spock-bom:2.3-groovy-4.0")
    testImplementation "org.spockframework:spock-core"
    testRuntimeOnly 'net.bytebuddy:byte-buddy:1.14.8'
    testRuntimeOnly "org.objenesis:objenesis:3.3"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.24.4"
    }
}

jacoco {
    toolVersion = jacocoVersion
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    'com/google/protobuf/*'
            ])
        }))
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat = TestExceptionFormat.FULL
        showExceptions = true
        showCauses = true
        showStackTraces = true
        outputs.upToDateWhen { false }
        showStandardStreams = true

        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }

        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
    finalizedBy jacocoTestReport
}

System.setProperty("org.checkstyle.google.suppressionfilter.config", project.projectDir.toString() + "/config/checkstyle/checkstyle-suppressions.xml")
checkstyle {
    toolVersion = "9.0"
    config = rootProject.resources.text.fromFile("config/checkstyle/google-java-format.xml")
    ignoreFailures = true
    maxErrors = 0
    maxWarnings = 0
}
